# ORM

Today:
  * What are ORMS?
  * JPA in java
  * Generating tables from classes
  * Generating classes from tables
  * Entity classes
  * Persisting Objects and collections

## What are ORMS, and what good are they?

Pros:
  * Less code (less work)
  * Abstracts the type of data-layer away (somewhat)
  * Allows to stay in OO-paradigm

Cons:
  * Obscures what is actually happening
  * But doesn't always obscure it enough
  * Often results in poorly designed databases
  * Not as easy as it might seem (impedance sort of ruins the point, doesn't it?)


## OO/relaational mismatches
  * Simple types; String vs varchar
  * Field/references vs cols and rows
  * Relationships are inherently one-way in OO, inherently two-way in
    relational schemas.
  * Inheritance is not a thing in relational databases.

## Red-tape
  * Add eclipselink to netbeans
  * Add persistence unit with netbeans
  * persistence.xml
  * EntityManager (can be injected with @PersistenceContext)

## Generating tables from classes

## Generating classes from tables
## Entity classes
To be an entity, a class:
  * Must have the @Entity annotation
  * Must have @Id field.
  * Must have a public or protected no-args constructor
  * must not be final, or have final methods or instance variables
  * _Should_ implement Serializable, if instances will handled outside of the
    entitymanager (detached).
  * May extend both entity and non-entity classes, and may _be extended_ by
    non-entity classes

### "Simple" mappings
  * Primary keys
    * @GeneratedValue(strategy=.., generator=)
      * AUTO
      * ID
      * SEQUENCE
      * TABLE
      * @{Seq,Table}Generator(name=, table=)
      * Composite
        * @IdClass
        * @EmbeddableId and @Embeddable (see slide 31 of ORM-intro.pdf)
  * @Transient
  * Single-object fields
    * @Temporal
    * @Enumerated
### Collections
  * @ElementCollection
  * @MapKeyColumn

## Today:
  * What are ORMS?
  * JPA in java
  * Generating tables from classes
  * Generating classes from tables
  * Entity classes
  * Persisting Objects and collections

## Tomorrow:
  * Relationships
